{"version":3,"sources":["utils/interact.js","Minter.js","App.js","reportWebVitals.js","index.js"],"names":["require","config","web3","createAlchemyWeb3","process","contractABI","contractAddress","connectWallet","a","window","ethereum","request","method","addressArray","obj","status","address","message","target","href","getCurrentWalletConnected","length","mintNFT","eth","Contract","contract","transactionParameters","from","selectedAddress","to","gas","gasPrice","value","data","methods","encodeABI","params","txHash","success","Minter","props","useState","walletAddress","setWallet","setStatus","useEffect","addWalletListener","connectWalletPressed","walletResponse","onMintPressed","on","accounts","className","id","onClick","String","substring","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1378dfc1.chunk.js","sourcesContent":["require('dotenv').config();\r\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\r\nconst {createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\r\nconst web3 = createAlchemyWeb3(alchemyKey);\r\n\r\nconst contractABI = require('../contract-abi.json');\r\nconst contractAddress = \"0x94463B828225c8Aca905dC26207d2a8dAB6d3090\"\r\n\r\n//0.1 Ether\r\nconst price = \"0x2386F26FC10000\";\r\n//3000000 Gwei (0.003 Ether)\r\nconst gasLimit = \"0x2DC6C0\";\r\n\r\nexport const connectWallet = async () => {\r\n  if (window.ethereum) {\r\n    try {\r\n      const addressArray = await window.ethereum.request({\r\n        method: \"eth_requestAccounts\",\r\n      });\r\n      const obj = {\r\n        status: \"👆🏽 Write a message in the text-field above.\",\r\n        address: addressArray[0],\r\n      };\r\n      return obj;\r\n    } catch (err) {\r\n      return {\r\n        address: \"\",\r\n        status: \"😥 \" + err.message,\r\n      };\r\n    }\r\n  } else {\r\n    return {\r\n      address: \"\",\r\n      status: (\r\n        <span>\r\n          <p>\r\n            {\" \"}\r\n            🦊{\" \"}\r\n            <a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n              You must install Metamask, a virtual Ethereum wallet, in your\r\n              browser.\r\n            </a>\r\n          </p>\r\n        </span>\r\n      ),\r\n    };\r\n  }\r\n};\r\n\r\nexport const getCurrentWalletConnected = async () => {\r\n  if (window.ethereum) {\r\n    try {\r\n      const addressArray = await window.ethereum.request({\r\n        method: \"eth_accounts\",\r\n      });\r\n      if (addressArray.length > 0) {\r\n        return {\r\n          address: addressArray[0],\r\n          status: \"🦊 Wallet connected.\",\r\n        };\r\n      } else {\r\n        return {\r\n          address: \"\",\r\n          status: \"🦊 Connect to Metamask using the top right button.\",\r\n        };\r\n      }\r\n    } catch (err) {\r\n      return {\r\n        address: \"\",\r\n        status: \"😥 \" + err.message,\r\n      };\r\n    }\r\n  } else {\r\n    return {\r\n      address: \"\",\r\n      status: (\r\n        <span>\r\n          <p>\r\n            {\" \"}\r\n            🦊{\" \"}\r\n            <a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n              You must install Metamask, a virtual Ethereum wallet, in your\r\n              browser.\r\n            </a>\r\n          </p>\r\n        </span>\r\n      ),\r\n    };\r\n  }\r\n};\r\n\r\nexport const mintNFT = async() => {\r\n  //error handling\r\n  window.contract = await new web3.eth.Contract(contractABI, contractAddress);\r\n\r\n  //set up Ethereum transaction\r\n  //gasPrice denomination gwei\r\n  const transactionParameters = {\r\n        from: window.ethereum.selectedAddress,\r\n        to: contractAddress,\r\n        gas: gasLimit,\r\n        gasPrice: \"0x3B9ACA00\",\r\n        value: price,\r\n        data: window.contract.methods.mintNFT(1).encodeABI()\r\n  }\r\n  //sign the transaction via Metamask\r\n  try {\r\n  const txHash = await window.ethereum\r\n    .request({\r\n        method: 'eth_sendTransaction',\r\n        params: [transactionParameters],\r\n    });\r\n    return {\r\n      success: true,\r\n      status: \"✅ Check out your transaction on Etherscan: https://ropsten.etherscan.io/tx/\" + txHash\r\n    }\r\n  } catch (error) {\r\n    return {\r\n      success: false,\r\n      status: \"😥 Something went wrong: \" + error.message\r\n    }\r\n  }\r\n }","import { useEffect, useState } from \"react\";\r\nimport { connectWallet, getCurrentWalletConnected, mintNFT } from \"./utils/interact.js\";\r\n\r\nconst Minter = (props) => {\r\n\r\n  //State variables\r\n  const [walletAddress, setWallet] = useState(\"\");\r\n  const [status, setStatus] = useState(\"\");\r\n  const [name, setName] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [url, setURL] = useState(\"\");\r\n \r\n  useEffect(async () => { \r\n    const {address, status} = await getCurrentWalletConnected();\r\n    setWallet(address)\r\n    setStatus(status);\r\n\r\n    addWalletListener();\r\n  }, []);\r\n\r\n  const connectWalletPressed = async () => { \r\n    const walletResponse = await connectWallet();\r\n    setStatus(walletResponse.status);\r\n    setWallet(walletResponse.address);\r\n  };\r\n\r\n  const onMintPressed = async () => {\r\n    const { status } = await mintNFT();\r\n    setStatus(status);\r\n  };\r\n\r\n  function addWalletListener() {\r\n    if (window.ethereum) {\r\n      window.ethereum.on(\"accountsChanged\", (accounts) => {\r\n        if (accounts.length > 0) {\r\n          setWallet(accounts[0]);\r\n          setStatus(\"🦊 Wallet connected.\");\r\n        } else {\r\n          setWallet(\"\");\r\n          setStatus(\"🦊 Connect to Metamask using the top right button.\");\r\n        }\r\n      });\r\n    } else {\r\n      setStatus(\r\n        <p>\r\n          {\" \"}\r\n          🦊{\" \"}\r\n          <a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n            You must install Metamask, a virtual Ethereum wallet, in your\r\n            browser.\r\n          </a>\r\n        </p>\r\n      );\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"Minter\">\r\n      <button id=\"walletButton\" onClick={connectWalletPressed}>\r\n        {walletAddress.length > 0 ? (\r\n          \"Connected: \" +\r\n          String(walletAddress).substring(0, 6) +\r\n          \"...\" +\r\n          String(walletAddress).substring(38)\r\n        ) : (\r\n          <span>Connect Wallet</span>\r\n        )}\r\n      </button>\r\n\r\n      <br></br>\r\n      <h1 id=\"title\">🧙‍♂️ Alchemy NFT Minter</h1>\r\n      <p>\r\n        Simply add your asset's link, name, and description, then press \"Mint.\"\r\n      </p>\r\n      <button id=\"mintButton\" onClick={onMintPressed}>\r\n        Mint NFT\r\n      </button>\r\n      <p id=\"status\">\r\n        {status}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Minter;\r\n","import './App.css';\r\nimport Minter from './Minter'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Minter></Minter>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}