{"version":3,"sources":["utils/interact.js","utils/constants.js","components/Identicon.jsx","components/ConnectButton.jsx","components/AccountModal.jsx","Minter.jsx","App.jsx","reportWebVitals.js","index.jsx"],"names":["require","config","web3","createAlchemyWeb3","process","contractABI","contractAddress","mintNFT","a","eth","Contract","window","contract","transactionParameters","from","ethereum","selectedAddress","to","gas","gasPrice","value","data","methods","encodeABI","request","method","params","txHash","success","status","inline","weight","target","href","title","color","message","getTokenSupply","totalSupply","call","err","res","console","log","PARTICLE_PARAMS","particles","number","limit","density","enable","value_area","shape","type","stroke","width","polygon","nb_sides","image","src","height","opacity","random","anim","speed","opacity_min","sync","size","size_min","line_linked","distance","move","direction","straight","out_mode","bounce","attract","rotateX","rotateY","backgroundMask","cover","r","g","b","retina_detect","fps_limit","StyledIdenticon","styled","div","Identicon","ref","useRef","account","useEthers","useEffect","current","innerHTML","appendChild","Jazzicon","parseInt","slice","ConnectButton","handlePopoverOpen","activateBrowserWallet","etherBalance","useEtherBalance","display","alignItems","background","borderRadius","py","px","gridGap","fontSize","fontWeight","parseFloat","formatEther","toFixed","bg","border","_hover","borderStyle","borderColor","backgroundColor","m","onClick","mr","length","AccountPopover","children","isPopoverOpen","onPopoverClose","deactivate","initialFocusRef","toast","useToast","isOpen","onClose","pe","pt","pb","mb","justifyContent","variant","textDecoration","mt","lineHeight","ml","alignContent","text","render","rounding","padding","duration","Copy","isExternal","ExternalLink","Minter","useState","setIsPopoverOpen","setSupply","addWalletListener","fetchTokenSupply","onMintPressed","align","isClosable","on","accounts","description","className","Item","flex","paddingX","paddingY","gap","disabled","id","onChange","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","DAppProvider","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.50ca3ccc.chunk.js","sourcesContent":["import { Link, Text } from 'gestalt';\n\nrequire('dotenv').config();\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\nconst {createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\nconst web3 = createAlchemyWeb3(alchemyKey);\n\nconst contractABI = require('../contract-abi.json');\nconst contractAddress = \"0x94463B828225c8Aca905dC26207d2a8dAB6d3090\"\n\n//0.1 Ether\nconst price = \"0x2386F26FC10000\";\n//3000000 Gwei (0.003 Ether)\nconst gasLimit = \"0x2DC6C0\";\n\nexport const connectWallet = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n      const obj = {\n        status: \"👆🏽 Write a message in the text-field above.\",\n        address: addressArray[0],\n      };\n      return obj;\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message,\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: (\n        <span>\n          <p>\n            {\" \"}\n            🦊{\" \"}\n            <a target=\"_blank\" href={`https://metamask.io/download.html`} rel=\"noreferrer\">\n              You must install Metamask, a virtual Ethereum wallet, in your\n              browser.\n            </a>\n          </p>\n        </span>\n      ),\n    };\n  }\n};\n\nexport const getCurrentWalletConnected = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_accounts\",\n      });\n      if (addressArray.length > 0) {\n        return {\n          address: addressArray[0],\n          status: \"🦊 Wallet connected.\",\n        };\n      } else {\n        return {\n          address: \"\",\n          status: \"🦊 Connect to Metamask using the top right button.\",\n        };\n      }\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message,\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: (\n        <span>\n          <p>\n            {\" \"}\n            🦊{\" \"}\n            <a target=\"_blank\" href={`https://metamask.io/download.html`} rel=\"noreferrer\">\n              You must install Metamask, a virtual Ethereum wallet, in your\n              browser.\n            </a>\n          </p>\n        </span>\n      ),\n    };\n  }\n};\n\nexport const mintNFT = async() => {\n  //error handling\n  window.contract = await new web3.eth.Contract(contractABI, contractAddress);\n\n  //set up Ethereum transaction\n  //gasPrice denomination gwei\n  const transactionParameters = {\n        from: window.ethereum.selectedAddress,\n        to: contractAddress,\n        gas: gasLimit,\n        gasPrice: \"0x3B9ACA00\",\n        value: price,\n        data: window.contract.methods.mintNFT(1).encodeABI()\n  }\n  //sign the transaction via Metamask\n  try {\n  const txHash = await window.ethereum\n    .request({\n        method: 'eth_sendTransaction',\n        params: [transactionParameters],\n    });\n    return {\n      success: true,\n      status: (\n        <>\n        Check out your {' '}\n        <Text inline weight=\"bold\">\n          <Link weight=\"bold\" inline target=\"blank\" href={`https://ropsten.etherscan.io/tx/${txHash}`}>\n            transaction\n          </Link>\n        </Text>\n        {' '} on Etherscan.\n        </>\n      ),\n      title: \"Your token was minted!\"\n    }\n  } catch (error) {\n    return {\n      success: false,\n      status: (\n        <Text color=\"white\">\n          {error.message}\n        </Text>\n      ),\n      title: \"Something went wrong\"\n    }\n  }\n};\n\nexport const getTokenSupply = async() => {\n  const contract = await new web3.eth.Contract(contractABI, contractAddress);\n\n  contract.methods.totalSupply().call(function (err, res) {\n    if (err) {\n      console.log(\"An error occured: \", err)\n      return 0;\n    }\n    return res;\n  })\n};\n","const PARTICLE_PARAMS = {\n  particles: {\n    number: {\n      value: 100,\n      limit: 150,\n      density: {\n        enable: true,\n        value_area: 800,\n      },\n    },\n    color: {\n      value: '#ffffff',\n    },\n    shape: {\n      type: 'line',\n      stroke: {\n        width: 0,\n        color: '#ffffff',\n      },\n      polygon: {\n        nb_sides: 5,\n      },\n      image: {\n        src: 'images/github.svg',\n        width: 100,\n        height: 100,\n      },\n    },\n    opacity: {\n      value: 0.5,\n      random: true,\n      anim: {\n        enable: true,\n        speed: 1,\n        opacity_min: 0.5,\n        sync: false,\n      },\n    },\n    size: {\n      value: 30,\n      random: true,\n      anim: {\n        enable: true,\n        speed: 10,\n        size_min: 10,\n        sync: false,\n      },\n    },\n    line_linked: {\n      enable: true,\n      distance: 100,\n      color: '#ffffff',\n      opacity: 1,\n      width: 1,\n    },\n    move: {\n      enable: true,\n      speed: 3,\n      direction: 'none',\n      random: false,\n      straight: false,\n      out_mode: 'out',\n      bounce: false,\n      attract: {\n        enable: false,\n        rotateX: 600,\n        rotateY: 1200,\n      },\n    },\n  },\n  backgroundMask: {\n    enable: true,\n    cover: {\n      color: {\n        value: {\n          r: 26,\n          g: 16,\n          b: 28,\n        },\n      },\n    },\n  },\n  retina_detect: true,\n  fps_limit: 60,\n\n};\n\nexport default PARTICLE_PARAMS;\n","import { useEffect, useRef } from \"react\";\nimport { useEthers } from \"@usedapp/core\";\nimport styled from \"@emotion/styled\";\nimport Jazzicon from \"@metamask/jazzicon\";\n\nconst StyledIdenticon = styled.div`\n  height: 1rem;\n  width: 1rem;\n  border-radius: 1.125rem;\n  background-color: black;\n`;\n\nexport default function Identicon() {\n  const ref = useRef();\n  const { account } = useEthers();\n\n  useEffect(() => {\n    if (account && ref.current) {\n      ref.current.innerHTML = \"\";\n      ref.current.appendChild(Jazzicon(16, parseInt(account.slice(2, 10), 16)));\n    }\n  }, [account]);\n\n  return <StyledIdenticon ref={ref} />;\n};\n","import { Button, Box, Text } from \"@chakra-ui/react\";\nimport { useEthers, useEtherBalance } from \"@usedapp/core\";\nimport { formatEther } from \"@ethersproject/units\";\nimport Identicon from \"./Identicon\";\n\nexport default function ConnectButton({handlePopoverOpen}) {\n    const {activateBrowserWallet, account } = useEthers();\n    const etherBalance = useEtherBalance(account);\n\n    const handleConnectWallet = () => {\n        activateBrowserWallet();\n    }\n\n    return account ? (\n        <Box\n        display=\"flex\"\n        alignItems=\"center\"\n        background=\"gray.700\"\n        borderRadius=\"xl\"\n        py=\"0\"\n      >\n        <Box \n            display=\"flex\"\n            alignItems=\"center\" \n            px=\"2\"\n            gridGap={2}\n        >\n            <Text color=\"white\" fontSize=\"md\" fontWeight={800}>\n                bal\n            </Text>\n            <Text color=\"white\" fontSize=\"md\">\n                {etherBalance && parseFloat(formatEther(etherBalance)).toFixed(3)} ETH\n            </Text>\n        </Box>\n        <Button\n          bg=\"gray.800\"\n          border=\"1px solid transparent\"\n          _hover={{\n            border: \"1px\",\n            borderStyle: \"solid\",\n            borderColor: \"blue.400\",\n            backgroundColor: \"gray.700\",\n          }}\n          borderRadius=\"xl\"\n          m=\"1px\"\n          px={3}\n          height=\"38px\"\n          onClick={handlePopoverOpen}\n        >\n          <Text color=\"white\" fontSize=\"md\" fontWeight=\"medium\" mr=\"2\">\n            {account &&\n              `${account.slice(0, 6)}...${account.slice(\n                account.length - 4,\n                account.length\n              )}`}\n          </Text>\n          <Identicon />\n        </Button>\n      </Box>\n    ) : (\n        <Button onClick={handleConnectWallet}>Connect to a wallet</Button>\n    );\n}\n","import React, {useRef} from \"react\"\nimport { Box as GestaltBox, Heading, Toast as GestaltToast } from \"gestalt\";\nimport {\n    Box,\n    Button,\n    Flex,\n    Link,\n    Popover,\n    PopoverContent,\n    PopoverHeader,\n    PopoverBody,\n    PopoverCloseButton,\n    PopoverTrigger,\n    PopoverArrow,\n    Text,\n    useToast,\n  } from \"@chakra-ui/react\";\n  import { ExternalLinkIcon, CopyIcon } from \"@chakra-ui/icons\";\n  import { useEthers } from \"@usedapp/core\";\n  import Identicon from \"./Identicon\";\n  import {CopyToClipboard} from 'react-copy-to-clipboard';\n  \n  export default function AccountPopover({ children, isPopoverOpen, onPopoverClose}) {\n    const { account, deactivate } = useEthers();\n    const initialFocusRef = useRef()\n    const toast = useToast()\n\n    const handleDeactivateAccount = () => {\n      deactivate();\n    }\n\n    return(\n      <Popover\n        isOpen={isPopoverOpen}\n        onClose={onPopoverClose}\n        initialFocusRef={initialFocusRef}\n      >\n        <PopoverTrigger>\n          <Box pe=\"10\"></Box>\n        </PopoverTrigger>\n        <PopoverContent\n          background=\"gray.900\"\n          border=\"1px\"\n          borderStyle=\"solid\"\n          borderColor=\"gray.700\"\n          borderRadius=\"3xl\"\n          width=\"500\"\n        >\n          <PopoverHeader color=\"white\" px={4} fontSize=\"lg\" fontWeight=\"medium\">\n            Account\n          </PopoverHeader>\n          <PopoverArrow />\n          <PopoverCloseButton\n            color=\"white\"\n            fontSize=\"sm\"\n            _hover={{\n              color: \"whiteAlpha.700\",\n            }}\n          />\n          <PopoverBody pt={4} px={4}>\n            <Box\n              borderRadius=\"3xl\"\n              border=\"1px\"\n              borderStyle=\"solid\"\n              borderColor=\"gray.600\"\n              px={5}\n              pt={4}\n              pb={2}\n              mb={3}\n            >\n              <Flex justifyContent=\"space-between\" alignItems=\"center\" mb={3}>\n                <Text color=\"gray.400\" fontSize=\"sm\">\n                  Connected with MetaMask\n                </Text>\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  borderColor=\"blue.800\"\n                  borderRadius=\"3xl\"\n                  color=\"blue.500\"\n                  fontSize=\"13px\"\n                  fontWeight=\"normal\"\n                  px={2}\n                  height=\"26px\"\n                  _hover={{\n                    background: \"none\",\n                    borderColor: \"blue.300\",\n                    textDecoration: \"underline\",\n                  }}\n                  onClick={handleDeactivateAccount}\n                >\n                  Change\n                </Button>\n              </Flex>\n              <Flex alignItems=\"center\" justifyContent=\"center\" mt={2} mb={4} lineHeight={1}>\n                <Identicon />\n                <Text\n                  color=\"white\"\n                  fontSize=\"xl\"\n                  fontWeight=\"semibold\"\n                  ml=\"2\"\n                  lineHeight=\"1.1\"\n                >\n                  {account &&\n                    `${account.slice(0, 6)}...${account.slice(\n                      account.length - 4,\n                      account.length\n                    )}`}\n                </Text>\n              </Flex>\n              <Flex alignContent=\"center\" m={3}>\n                <CopyToClipboard text={account}>\n                  <Button\n                    variant=\"link\"\n                    color=\"gray.400\"\n                    fontWeight=\"normal\"\n                    fontSize=\"sm\"\n                    _hover={{\n                      textDecoration: \"none\",\n                      color: \"whiteAlpha.800\",\n                    }}\n                    onClick={() => toast({\n                      render: () => (\n                        <GestaltBox rounding='pill' padding={6} color=\"green\" display=\"flex\" justifyContent=\"center\">\n                          <Heading size=\"sm\" color=\"white\">\n                          Account copied\n                          </Heading>\n                        </GestaltBox>\n                      ),\n                      duration: 3000,\n                    })}\n                  >\n                    <CopyIcon mr={1} />\n                    Copy Address\n                  </Button>\n                </CopyToClipboard>\n                <Link\n                  fontSize=\"sm\"\n                  display=\"flex\"\n                  alignItems=\"center\"\n                  href={`https://ropsten.etherscan.io/address/${account}`}\n                  isExternal\n                  color=\"gray.400\"\n                  ml={6}\n                  _hover={{\n                    color: \"whiteAlpha.800\",\n                    textDecoration: \"underline\",\n                  }}\n                >\n                  <ExternalLinkIcon mr={1} />\n                  View on Explorer\n                </Link>\n              </Flex>\n            </Box>\n          </PopoverBody>\n        </PopoverContent>\n      </Popover>\n    )\n}\n","import React, { useEffect, useState } from 'react';\nimport {\n  Box, Button, Flex, Heading, Link, Text, Toast as GestaltToast, TextField,\n} from 'gestalt';\nimport Particles from 'react-particles-js';\nimport {\n mintNFT, \n getTokenSupply,\n} from './utils/interact';\nimport PARTICLE_PARAMS from './utils/constants';\nimport ConnectButton from \"./components/ConnectButton\";\nimport AccountModal from \"./components/AccountModal\";\nimport { useToast } from \"@chakra-ui/react\";\n\n\nconst Minter = () => {\n  const [value] = useState(1);\n  const [isPopoverOpen, setIsPopoverOpen] = useState(false);\n  const toast = useToast();\n\n  const handlePopoverClose = () => setIsPopoverOpen(false);\n  const handlePopoverOpen = () => setIsPopoverOpen(true);\n  const [supply, setSupply] = useState('');\n\n  useEffect(() => {\n    // const { address, status } = await getCurrentWalletConnected();\n    // setWallet(address);\n    // setStatus(status);\n\n    addWalletListener();\n    const fetchTokenSupply = async() => {\n      setSupply(await getTokenSupply());\n    }\n    fetchTokenSupply();\n  }, []);\n\n  const onMintPressed = async () => {\n    const { status, success, title} = await mintNFT();\n    toast({\n      // title: title || \"\",\n      // description: status,\n      render: () => (\n        <GestaltToast \n          text={\n            <>\n            <Text align=\"center\" weight=\"bold\" color={success ? \"green\": \"white\"}>{title}</Text>\n            {status}\n            </>\n          } \n          variant={success ? \"default\": \"error\"}  \n        />\n      ),\n      // status: success ? \"success\": \"error\",\n      isClosable: true,\n      duration: 30000,\n    })\n  };\n\n  const noop = () => {};\n\n  const addWalletListener = () => {\n    if (window.ethereum) {\n      window.ethereum.on('accountsChanged', (accounts) => {\n        console.log(accounts);\n        if (accounts.length > 0) {\n        } else {\n        }\n      });\n    } else {\n      toast({\n        title: \"Connection issue.\",\n        description: \"Metamask not installed\",\n        status: \"warning\",\n        duration: 3000,\n        isClosable: true,\n      })\n    }\n  }\n\n  return (\n    <>\n      <Box className=\"Minter\" padding={4}>\n        <Flex justifyContent=\"end\">\n          <Flex.Item>\n            <Heading color=\"lightGray\">\"project name\"</Heading>\n          </Flex.Item>\n          <Flex.Item flex=\"grow\" />\n          <Flex.Item>\n            <Box paddingX={10}>\n              <ConnectButton handlePopoverOpen={handlePopoverOpen}/>\n              <AccountModal isPopoverOpen={isPopoverOpen} onPopoverClose={handlePopoverClose}/>\n            </Box>\n          </Flex.Item>\n        </Flex>\n        <Box paddingY={4}>\n          <Flex gap={4} justifyContent=\"center\" alignItems=\"start\">\n            <Heading size=\"lg\" color=\"orchid\">\n              wow\n              {/* {supply} */}\n            </Heading>\n          </Flex>\n        </Box>\n        <Box paddingY={4}>\n          <Flex gap={4} justifyContent=\"center\" alignItems=\"start\">\n            <TextField disabled type=\"number\" id=\"amountToMintTextField\" onChange={noop} value={value} />\n            <Button id=\"mintButton\" color=\"gray\" onClick={onMintPressed} text=\"Mint NFT\" />\n          </Flex>\n        </Box>\n      </Box>\n      <Particles\n        params={PARTICLE_PARAMS}\n      />\n    </>\n  );\n};\n\nexport default Minter;\n","import React from 'react';\nimport './App.css';\nimport 'gestalt/dist/gestalt.css';\nimport Minter from './Minter';\nimport { ChakraProvider } from \"@chakra-ui/react\";\n\nfunction App() {\n  return (\n    <ChakraProvider>\n      <div className=\"App\">\n        <Minter />\n      </div>\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { DAppProvider } from \"@usedapp/core\";\n\nReactDOM.render(\n  <DAppProvider config={{}}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </DAppProvider>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}