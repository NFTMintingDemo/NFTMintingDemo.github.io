{"version":3,"sources":["utils/interact.js","Minter.js","App.js","reportWebVitals.js","index.js"],"names":["require","config","web3","createAlchemyWeb3","process","contractABI","contractAddress","connectWallet","a","window","ethereum","request","method","addressArray","obj","status","address","message","target","href","getCurrentWalletConnected","length","mintNFT","eth","Contract","contract","transactionParameters","from","selectedAddress","to","gas","gasPrice","value","data","methods","encodeABI","params","txHash","success","getTokenSupply","totalSupply","call","err","res","console","log","Minter","props","useState","walletAddress","setWallet","setStatus","setSupply","useEffect","addWalletListener","connectWalletPressed","walletResponse","onMintPressed","noop","on","accounts","className","padding","justifyContent","Item","color","flex","id","onClick","text","String","substring","paddingY","gap","alignItems","size","disabled","type","onChange","particles","number","limit","density","enable","value_area","shape","stroke","width","polygon","nb_sides","image","src","height","opacity","random","anim","speed","opacity_min","sync","size_min","line_linked","distance","move","direction","straight","out_mode","bounce","attract","rotateX","rotateY","backgroundMask","cover","r","g","b","retina_detect","fps_limit","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5bfe7092.chunk.js","sourcesContent":["require('dotenv').config();\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\nconst {createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\nconst web3 = createAlchemyWeb3(alchemyKey);\n\nconst contractABI = require('../contract-abi.json');\nconst contractAddress = \"0x94463B828225c8Aca905dC26207d2a8dAB6d3090\"\n\n//0.1 Ether\nconst price = \"0x2386F26FC10000\";\n//3000000 Gwei (0.003 Ether)\nconst gasLimit = \"0x2DC6C0\";\n\nexport const connectWallet = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n      const obj = {\n        status: \"👆🏽 Write a message in the text-field above.\",\n        address: addressArray[0],\n      };\n      return obj;\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message,\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: (\n        <span>\n          <p>\n            {\" \"}\n            🦊{\" \"}\n            <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n              You must install Metamask, a virtual Ethereum wallet, in your\n              browser.\n            </a>\n          </p>\n        </span>\n      ),\n    };\n  }\n};\n\nexport const getCurrentWalletConnected = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_accounts\",\n      });\n      if (addressArray.length > 0) {\n        return {\n          address: addressArray[0],\n          status: \"🦊 Wallet connected.\",\n        };\n      } else {\n        return {\n          address: \"\",\n          status: \"🦊 Connect to Metamask using the top right button.\",\n        };\n      }\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message,\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: (\n        <span>\n          <p>\n            {\" \"}\n            🦊{\" \"}\n            <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n              You must install Metamask, a virtual Ethereum wallet, in your\n              browser.\n            </a>\n          </p>\n        </span>\n      ),\n    };\n  }\n};\n\nexport const mintNFT = async() => {\n  //error handling\n  window.contract = await new web3.eth.Contract(contractABI, contractAddress);\n\n  //set up Ethereum transaction\n  //gasPrice denomination gwei\n  const transactionParameters = {\n        from: window.ethereum.selectedAddress,\n        to: contractAddress,\n        gas: gasLimit,\n        gasPrice: \"0x3B9ACA00\",\n        value: price,\n        data: window.contract.methods.mintNFT(1).encodeABI()\n  }\n  //sign the transaction via Metamask\n  try {\n  const txHash = await window.ethereum\n    .request({\n        method: 'eth_sendTransaction',\n        params: [transactionParameters],\n    });\n    return {\n      success: true,\n      status: \"✅ Check out your transaction on Etherscan: https://ropsten.etherscan.io/tx/\" + txHash\n    }\n  } catch (error) {\n    return {\n      success: false,\n      status: \"😥 Something went wrong: \" + error.message\n    }\n  }\n};\n\nexport const getTokenSupply = async() => {\n  const contract = await new web3.eth.Contract(contractABI, contractAddress);\n\n  contract.methods.totalSupply().call(function (err, res) {\n    if (err) {\n      console.log(\"An error occured: \", err)\n      return 0;\n    }\n    return res;\n  })\n};","import { useEffect, useState } from \"react\";\nimport { Box, Button, Flex, Heading, Text, TextField, Title } from \"gestalt\";\nimport Particles from 'react-particles-js';\nimport { connectWallet, getCurrentWalletConnected, mintNFT, getTokenSupply } from \"./utils/interact.js\";\n\nconst Minter = (props) => {\n\n  //State variables\n  const [walletAddress, setWallet] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [url, setURL] = useState(\"\");\n  const [value, setValue] = useState(1);\n  const [supply, setSupply] = useState(\"\");\n\n \n  useEffect(async () => { \n    const {address, status} = await getCurrentWalletConnected();\n    setWallet(address)\n    setStatus(status);\n\n    addWalletListener();\n    setSupply(getTokenSupply());\n  }, []);\n\n  const connectWalletPressed = async () => { \n    const walletResponse = await connectWallet();\n    setStatus(walletResponse.status);\n    setWallet(walletResponse.address);\n  };\n\n  const onMintPressed = async () => {\n    const { status } = await mintNFT();\n    setStatus(status);\n  };\n\n  const noop = () => {}; \n\n  function addWalletListener() {\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", (accounts) => {\n        if (accounts.length > 0) {\n          setWallet(accounts[0]);\n          setStatus(\"🦊 Wallet connected.\");\n        } else {\n          setWallet(\"\");\n          setStatus(\"🦊 Connect to Metamask using the top right button.\");\n        }\n      });\n    } else {\n      setStatus(\n        <Text>\n          {\" \"}\n          🦊{\" \"}\n          <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n            You must install Metamask, a virtual Ethereum wallet, in your\n            browser.\n          </a>\n        </Text>\n      );\n    }\n  }\n\n  return (\n    <>\n    <Box className=\"Minter\" padding={4}>\n      <Flex justifyContent=\"end\">\n        <Flex.Item>\n          <Heading color=\"lightGray\">\"project name\"</Heading>\n        </Flex.Item>\n        <Flex.Item flex=\"grow\"/>\n        <Flex.Item>\n          <Button\n            id=\"walletButton\"\n            onClick={connectWalletPressed} \n            text={\n              walletAddress.length > 0 ? (\n                \"Connected: \" +\n                String(walletAddress).substring(0, 6) +\n                \"...\" +\n                String(walletAddress).substring(38)\n                ) : (\n                  <Text>Connect Wallet</Text>\n                  )}\n                  />\n          </Flex.Item>\n      </Flex>\n      <Box paddingY={4}>\n        <Flex gap={4} justifyContent=\"center\" alignItems=\"start\">\n          <Heading size=\"lg\" color=\"orchid\">\n            wow\n          </Heading>\n        </Flex>\n      </Box>\n      <Box paddingY={4}>\n        <Flex gap={4} justifyContent=\"center\" alignItems=\"start\">\n          <TextField disabled type=\"number\" id=\"amountToMintTextField\" onChange={({ value}) => noop} value={value} />\n          <Button id=\"mintButton\" color=\"gray\" onClick={onMintPressed} text=\"Mint NFT\" />\n        </Flex>\n        <Box paddingY={4}>\n          <Flex justifyContent=\"center\" alignItems=\"start\">\n            <Text size=\"lg\" color=\"lightGray\">\n              {status}\n            </Text>\n          </Flex>\n        </Box>\n      </Box>\n    </Box>\n    <Particles\n      params={{\n        particles: {\n          number: {\n            value: 100,\n            limit: 150,\n            density: {\n              enable: true,\n              value_area: 800\n            }\n          },\n          color: {\n            value: \"#ffffff\"\n          },\n          shape: {\n            type: \"line\",\n            stroke: {\n              width: 0,\n              color: \"#ffffff\"\n            },\n            polygon: {\n              nb_sides: 5\n            },\n            image: {\n              src: \"images/github.svg\",\n              width: 100,\n              height: 100\n            }\n          },\n          opacity: {\n            value: 0.5,\n            random: true,\n            anim: {\n              enable: true,\n              speed: 1,\n              opacity_min: 0.5,\n              sync: false\n            }\n          },\n          size: {\n            value: 30,\n            random: true,\n            anim: {\n              enable: true,\n              speed: 10,\n              size_min: 10,\n              sync: false\n            }\n          },\n          line_linked: {\n            enable: true,\n            distance: 100,\n            color: \"#ffffff\",\n            opacity: 1,\n            width: 1\n          },\n          move: {\n            enable: true,\n            speed: 3,\n            direction: \"none\",\n            random: false,\n            straight: false,\n            out_mode: \"out\",\n            bounce: false,\n            attract: {\n              enable: false,\n              rotateX: 600,\n              rotateY: 1200\n            }\n          }\n        },\n        backgroundMask: {\n          enable: true,\n          cover: {\n            color: {\n              value: {\n                r: 26,\n                g: 16,\n                b: 28\n              }\n            }\n          }\n        },\n        retina_detect: true,\n        fps_limit: 60,\n\n      }}\n    />\n </>\n  );\n};\n\nexport default Minter;\n","import './App.css';\nimport 'gestalt/dist/gestalt.css';\nimport Minter from './Minter'\nimport Particles from 'react-particles-js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Minter></Minter>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}