{"version":3,"sources":["utils/interact.js","Minter.js","App.js","reportWebVitals.js","index.js"],"names":["require","config","alchemyKey","process","REACT_APP_ALCHEMY_KEY","web3","createAlchemyWeb3","contractABI","contractAddress","connectWallet","a","window","ethereum","request","method","addressArray","obj","status","address","message","target","href","getCurrentWalletConnected","length","mintNFT","eth","Contract","contract","transactionParameters","from","selectedAddress","to","gas","gasPrice","value","data","methods","encodeABI","params","txHash","success","Minter","props","useState","walletAddress","setWallet","setStatus","useEffect","addWalletListener","connectWalletPressed","walletResponse","onMintPressed","on","accounts","className","id","onClick","String","substring","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.79329d42.chunk.js","sourcesContent":["require('dotenv').config();\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\nconst {createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\nconst web3 = createAlchemyWeb3(alchemyKey);\n\nconst contractABI = require('../contract-abi.json');\nconst contractAddress = \"0x94463B828225c8Aca905dC26207d2a8dAB6d3090\"\n\n//0.1 Ether\nconst price = \"0x2386F26FC10000\";\n//300000 Gwei (0.0003 Ether)\nconst gasLimit = \"0x493E0\";\n\nexport const connectWallet = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_requestAccounts\",\n      });\n      const obj = {\n        status: \"👆🏽 Write a message in the text-field above.\",\n        address: addressArray[0],\n      };\n      return obj;\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message,\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: (\n        <span>\n          <p>\n            {\" \"}\n            🦊{\" \"}\n            <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n              You must install Metamask, a virtual Ethereum wallet, in your\n              browser.\n            </a>\n          </p>\n        </span>\n      ),\n    };\n  }\n};\n\nexport const getCurrentWalletConnected = async () => {\n  if (window.ethereum) {\n    try {\n      const addressArray = await window.ethereum.request({\n        method: \"eth_accounts\",\n      });\n      if (addressArray.length > 0) {\n        return {\n          address: addressArray[0],\n          status: \"🦊 Wallet connected.\",\n        };\n      } else {\n        return {\n          address: \"\",\n          status: \"🦊 Connect to Metamask using the top right button.\",\n        };\n      }\n    } catch (err) {\n      return {\n        address: \"\",\n        status: \"😥 \" + err.message,\n      };\n    }\n  } else {\n    return {\n      address: \"\",\n      status: (\n        <span>\n          <p>\n            {\" \"}\n            🦊{\" \"}\n            <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n              You must install Metamask, a virtual Ethereum wallet, in your\n              browser.\n            </a>\n          </p>\n        </span>\n      ),\n    };\n  }\n};\n\nexport const mintNFT = async() => {\n  //error handling\n  window.contract = await new web3.eth.Contract(contractABI, contractAddress);\n\n  //set up Ethereum transaction\n  //gasPrice denomination gwei\n  const transactionParameters = {\n        from: window.ethereum.selectedAddress,\n        to: contractAddress,\n        gas: gasLimit,\n        gasPrice: \"0x3B9ACA00\",\n        value: price,\n        data: window.contract.methods.mintNFT(1).encodeABI()\n  }\n  //sign the transaction via Metamask\n  try {\n  const txHash = await window.ethereum\n    .request({\n        method: 'eth_sendTransaction',\n        params: [transactionParameters],\n    });\n    return {\n      success: true,\n      status: \"✅ Check out your transaction on Etherscan: https://ropsten.etherscan.io/tx/\" + txHash\n    }\n  } catch (error) {\n    return {\n      success: false,\n      status: \"😥 Something went wrong: \" + error.message\n    }\n  }\n }","import { useEffect, useState } from \"react\";\nimport { connectWallet, getCurrentWalletConnected, mintNFT } from \"./utils/interact.js\";\n\nconst Minter = (props) => {\n\n  //State variables\n  const [walletAddress, setWallet] = useState(\"\");\n  const [status, setStatus] = useState(\"\");\n  const [name, setName] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [url, setURL] = useState(\"\");\n \n  useEffect(async () => { \n    const {address, status} = await getCurrentWalletConnected();\n    setWallet(address)\n    setStatus(status);\n\n    addWalletListener();\n  }, []);\n\n  const connectWalletPressed = async () => { \n    const walletResponse = await connectWallet();\n    setStatus(walletResponse.status);\n    setWallet(walletResponse.address);\n  };\n\n  const onMintPressed = async () => {\n    const { status } = await mintNFT();\n    setStatus(status);\n  };\n\n  function addWalletListener() {\n    if (window.ethereum) {\n      window.ethereum.on(\"accountsChanged\", (accounts) => {\n        if (accounts.length > 0) {\n          setWallet(accounts[0]);\n          setStatus(\"🦊 Wallet connected.\");\n        } else {\n          setWallet(\"\");\n          setStatus(\"🦊 Connect to Metamask using the top right button.\");\n        }\n      });\n    } else {\n      setStatus(\n        <p>\n          {\" \"}\n          🦊{\" \"}\n          <a target=\"_blank\" href={`https://metamask.io/download.html`}>\n            You must install Metamask, a virtual Ethereum wallet, in your\n            browser.\n          </a>\n        </p>\n      );\n    }\n  }\n\n  return (\n    <div className=\"Minter\">\n      <button id=\"walletButton\" onClick={connectWalletPressed}>\n        {walletAddress.length > 0 ? (\n          \"Connected: \" +\n          String(walletAddress).substring(0, 6) +\n          \"...\" +\n          String(walletAddress).substring(38)\n        ) : (\n          <span>Connect Wallet</span>\n        )}\n      </button>\n\n      <br></br>\n      <h1 id=\"title\">🧙‍♂️ Alchemy NFT Minter</h1>\n      <p>\n        Simply add your asset's link, name, and description, then press \"Mint.\"\n      </p>\n      <button id=\"mintButton\" onClick={onMintPressed}>\n        Mint NFT\n      </button>\n      <p id=\"status\">\n        {status}\n      </p>\n    </div>\n  );\n};\n\nexport default Minter;\n","import './App.css';\nimport Minter from './Minter'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Minter></Minter>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}